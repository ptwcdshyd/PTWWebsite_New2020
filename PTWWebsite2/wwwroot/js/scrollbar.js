function isTouchDevice() { try { return document.createEvent("TouchEvent"), !0 } catch (t) { return !1 } } $.fn.makeScroll = function () { return this.each(function () { $(this).data("scrollbar", new Scrollbar({ el: this })) }) }, Scrollbar = function (t) { this.$el = $(this.el = t.el), this.$el.addClass("scrollbar__container").before(this.$wrapper = $('<div class="scrollbar" />')).appendTo(this.$wrapper), isTouchDevice() ? this.$wrapper.addClass("scrollbar_mode_mobile") : (this.$el.after(this.$track = $('<div class="scrollbar__track" />').append(this.$handle = $('<div class="scrollbar__handle" />'))), this.refresh(), this.bindHandle(), this.bindWheel(), this.bindScrollTap(), this.$el.on("scroll", this.refresh.bind(this))) }, Scrollbar.prototype = { refresh: function () { var t = this.el.offsetHeight, e = this.el.scrollHeight, i = this.$track.height(); this.$handle.height(100 * t / e + "%").css("top", (this.handleTop = this.el.scrollTop / this.el.scrollHeight * i) + "px") }, bindHandle: function () { this.$handle.on("mousedown", function (t) { return this.startHandleMove({ position: t.pageY }), !1 }.bind(this)), $(this).on({ startMove: function () { this.$wrapper.addClass("scrollbar_state_move") }, stopMove: function () { this.$wrapper.removeClass("scrollbar_state_move") } }) }, startHandleMove: function (s) { $(this).trigger("startMove"), $(window).on("mousemove.scrollbarMove", function (t) { var e = (t.originalEvent.webkitMovementY || t.pageY - s.position) / this.$track.height(), i = this.el.scrollHeight * e; s.position = t.pageY, this.$el.scrollTop(this.$el.scrollTop() + i) }.bind(this)).on("mouseup.scrollbarMove blur.scrollbarMove", function () { $(window).off(".scrollbarMove"), $(this).trigger("stopMove") }.bind(this)) }, wheelStep: 30, bindWheel: function () { this.$wrapper.on("mousewheel", function (t) { this.$el.scrollTop(this.$el.scrollTop() - t.deltaY * this.wheelStep) }.bind(this)) }, bindScrollTap: function () { this.$track.on("mousedown", function (t) { if (t.target === this.$track[0]) { var e = t.offsetY > this.handleTop ? 1 : -1; this.tapTimer(e), t.preventDefault(), $(document).on("blur.tap mouseup.tap mouseleave.tap", function () { $(document).off(".tap"), clearTimeout(this._tapTimer) }.bind(this)) } }.bind(this)) }, tapTimeout: 200, tapTimer: function (t) { this.tap(t), this._tapTimer = setTimeout(this.tapTimer.bind(this, t), this.tapTimeout) }, tap: function (t) { this.$el.scrollTop(this.el.scrollTop + this.el.offsetHeight * t) } };